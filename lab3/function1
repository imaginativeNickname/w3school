from itertools import permutations
import re

def grams_to_ounces(grams):
    ounces = grams / 28.3495231
    return ounces

grams = float(input("Weight in grams: "))
print(f"{grams} grams is equal to {grams_to_ounces(grams):.2f} ounces")

def fahrenheit_to_celsius(fahrenheit):
    celsius = (5 / 9) * (fahrenheit - 32)
    return celsius

fahrenheit = float(input("temperature in Fahrenheit: "))
print(f"{fahrenheit} Fahrenheit is equal to {fahrenheit_to_celsius(fahrenheit):.2f} Celsius")

def solve(numheads, numlegs):
    rabbits = (numlegs - 2 * numheads) // 2
    chickens = numheads - rabbits
    return chickens, rabbits

numheads = int(input("Number of heads: "))
numlegs = int(input("Number of legs: "))
chickens, rabbits = solve(numheads, numlegs)
print(f"Chickens: {chickens}, Rabbits: {rabbits}")

def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def filter_prime(numbers):
    return [num for num in numbers if is_prime(num)]

numbers = list(map(int, input("Numbers: ").split()))
prime_numbers = filter_prime(numbers)
print("Prime numbers:", prime_numbers)

def print_permutations(s):
    perms = permutations(s)
    for perm in perms:
        print(''.join(perm))

user_input = input("Enter a string: ")
print_permutations(user_input)

def reverse_words(sentence):
    words = sentence.split()
    reversed_sentence = ' '.join(reversed(words))
    return reversed_sentence

user_input = input("Enter a sentence: ")
print(reverse_words(user_input))


def has_33(nums):
    for i in range(len(nums) - 1):
        if nums[i] == 3 and nums[i + 1] == 3:
            return True
    return False

nums = list(map(int, input("Enter a list of nums: ").split()))
print(has_33(nums))

def spy_game(nums):
    code = [0, 0, 7]
    index = 0
    
    for num in nums:
        if num == code[index]:
            index += 1
            if index == len(code):
                return True
    return False

nums = list(map(int, input("Enter a list: ").split()))
print(spy_game(nums))

from math import pi

def sphere_volume(radius):
    if radius < 0:
        raise ValueError("Radius can't be negative")
    
    volume = (4/3) * pi * radius**3
    return volume

radius = float(input("Enter radiud: "))
print(f"Volume of the sphere: {sphere_volume(radius):.2f}")

def unique_elements(lst):
    unique_list = []
    for item in lst:
        if item not in unique_list:
            unique_list.append(item)
    return unique_list

input_list = input("Enter numbers: ").split()
output_list = unique_elements(input_list)
print(output_list) 

def is_palindrome():
    text = input("Enter a word: ")
    cleaned_text = re.sub(r'[^a-zA-Z0-9]', '', text).lower()
    if cleaned_text == cleaned_text[::-1]:
        print("it's a palindrome")
    else:
        print("it's not a palindrome")

is_palindrome()

def histogram(numbers):
    for num in numbers:
        print('*' * num)

user_input = input()
numbers = list(map(int, user_input.split()))

histogram(numbers)

import random

def guess_the_number():
    print("Hello! What is your name?")
    name = input()
    
    print(f"\nWell, {name}, I am thinking of a number between 1 and 20.")
    
    secret_number = random.randint(1, 20)
    guesses_taken = 0
    
    while True:
        print("Take a guess.")
        try:
            guess = int(input())
            guesses_taken += 1
            
            if guess < secret_number:
                print("Your guess is too low.")
            elif guess > secret_number:
                print("Your guess is too high.")
            else:
                print(f"Good job, {name}! You guessed my number in {guesses_taken} guesses!")
                break
        except ValueError:
            print("Please enter a number between 1-20")
            
if __name__ == "__main__":
    guess_the_number()
