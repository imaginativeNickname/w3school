class StringProcessor:
    def __init__(self):
        self.txt=""
    def getString(self):
        self.txt=input()
    def printString(self):
        print(self.txt.upper())

processor = StringProcessor()
processor.getString()
processor.printString()

from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

class Square(Shape):
    def __init__(self, length=None):
        if length is None:
            self.length = float(input("Enter the length of the square: "))
        else:
            self.length = length
    
    def area(self):
        return self.length ** 2

class Rectangle(Shape):
    def __init__(self, length=None, width=None):
        if length is None or width is None:
            self.length = float(input("Enter the length of the rectangle: "))
            self.width = float(input("Enter the width of the rectangle: "))
        else:
            self.length = length
            self.width = width
    
    def area(self):
        return self.length * self.width

square1 = Square()
rectangle1 = Rectangle()

print("Area of Square:", square1.area())
print("Area of Rectangle:", rectangle1.area())


import math

class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def show(self):
        print(f"Point coordinates: ({self.x}, {self.y})")
    
    def move(self, new_x, new_y):
        self.x = new_x
        self.y = new_y
    
    def dist(self, other_point):
        return math.sqrt((self.x - other_point.x) ** 2 + (self.y - other_point.y) ** 2)

x1, y1 = map(int, input("Enter coordinates for first point (x y): ").split())
x2, y2 = map(int, input("Enter coordinates for second point (x y): ").split())

p1 = Point(x1, y1)
p2 = Point(x2, y2)
p1.show()
p2.show()
print("Distance:", p1.dist(p2))

new_x1, new_y1 = map(int, input("Enter new coordinates for first point (x y): ").split())
p1.move(new_x1, new_y1)
p1.show()

new_x2, new_y2 = map(int, input("Enter new coordinates for second point (x y): ").split())
p2.move(new_x2, new_y2)
p2.show()

print("New Distance:", p1.dist(p2))

class Account:
    def __init__(self, owner, balance=0):
        self.owner = owner
        self.balance = balance

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            print(f"Deposit of ${amount} successful. New balance: ${self.balance}")
        else:
            print("Deposit amount must be positive.")

    def withdraw(self, amount):
        if amount > self.balance:
            print("Withdrawal failed. Insufficient funds.")
        elif amount > 0:
            self.balance -= amount
            print(f"Withdrawal of ${amount} successful. New balance: ${self.balance}")
        else:
            print("Withdrawal amount must be positive.")

if __name__ == "__main__":
    owner = input("Enter account owner's name: ")
    initial_balance = float(input("Enter initial balance: "))
    acc = Account(owner, initial_balance)
    
    while True:
        action = input("Choose an action (deposit, withdraw, exit): ").strip().lower()
        if action == "deposit":
            amount = float(input("Enter deposit amount: "))
            acc.deposit(amount)
        elif action == "withdraw":
            amount = float(input("Enter withdrawal amount: "))
            acc.withdraw(amount)
        elif action == "exit":
            print("Exiting. Final balance:", acc.balance)
            break
        else:
            print("Invalid action. Please enter 'deposit', 'withdraw', or 'exit'.")
